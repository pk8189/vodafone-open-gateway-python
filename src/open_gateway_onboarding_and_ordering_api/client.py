"""File Generated by Sideko (sideko.dev)"""

import httpx
import typing
from open_gateway_onboarding_and_ordering_api.environment import Environment
from open_gateway_onboarding_and_ordering_api.core import (
    AsyncBaseClient,
    SyncBaseClient,
    AuthBearer,
)
from open_gateway_onboarding_and_ordering_api.resources.api_product import (
    ApiProductClient,
    AsyncApiProductClient,
)
from open_gateway_onboarding_and_ordering_api.resources.ping import (
    PingClient,
    AsyncPingClient,
)
from open_gateway_onboarding_and_ordering_api.resources.status import (
    AsyncStatusClient,
    StatusClient,
)
from open_gateway_onboarding_and_ordering_api.resources.api_product_order import (
    AsyncApiProductOrderClient,
    ApiProductOrderClient,
)
from open_gateway_onboarding_and_ordering_api.resources.application import (
    AsyncApplicationClient,
    ApplicationClient,
)
from open_gateway_onboarding_and_ordering_api.resources.application_owner import (
    AsyncApplicationOwnerClient,
    ApplicationOwnerClient,
)


class Client:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: Environment = Environment.DEFAULT,
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.Client] = None,
        oauth_token: typing.Optional[str] = None,
    ):
        self._base_client = SyncBaseClient(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            httpx_client=(
                httpx.Client(timeout=timeout) if httpx_client is None else httpx_client
            ),
        )

        # register auth methods (keep comment for code generation)
        self._base_client.register_auth(
            "oAuth2ClientCredentials", AuthBearer(val=oauth_token)
        )

        # register sync resources (keep comment for code generation)
        self.api_product = ApiProductClient(base_client=self._base_client)
        self.ping = PingClient(base_client=self._base_client)
        self.status = StatusClient(base_client=self._base_client)
        self.api_product_order = ApiProductOrderClient(base_client=self._base_client)
        self.application = ApplicationClient(base_client=self._base_client)
        self.application_owner = ApplicationOwnerClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)


class AsyncClient:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: Environment = Environment.DEFAULT,
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
        oauth_token: typing.Optional[str] = None,
    ):
        self._base_client = AsyncBaseClient(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            httpx_client=(
                httpx.AsyncClient(timeout=timeout)
                if httpx_client is None
                else httpx_client
            ),
        )

        # register auth methods (keep comment for code generation)
        self._base_client.register_auth(
            "oAuth2ClientCredentials", AuthBearer(val=oauth_token)
        )

        # register async resources (keep comment for code generation)
        self.api_product = AsyncApiProductClient(base_client=self._base_client)
        self.ping = AsyncPingClient(base_client=self._base_client)
        self.status = AsyncStatusClient(base_client=self._base_client)
        self.api_product_order = AsyncApiProductOrderClient(
            base_client=self._base_client
        )
        self.application = AsyncApplicationClient(base_client=self._base_client)
        self.application_owner = AsyncApplicationOwnerClient(
            base_client=self._base_client
        )

    # register async api methods (keep comment for code generation)


def _get_base_url(
    *, base_url: typing.Optional[str] = None, environment: Environment
) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Must include a base_url or environment arguments")
