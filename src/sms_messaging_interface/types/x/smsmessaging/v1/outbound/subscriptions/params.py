"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class CallbackReference(typing_extensions.TypedDict):
    """
    No description specified
    """

    callback_data: typing_extensions.NotRequired[str]
    notify_url: typing_extensions.NotRequired[str]


class _SerializerCallbackReference(pydantic.BaseModel):
    """
    Serializer for CallbackReference handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    callback_data: typing.Optional[str] = pydantic.Field(
        alias="callbackData", default=None
    )
    notify_url: typing.Optional[str] = pydantic.Field(alias="notifyURL", default=None)


class DeliveryReceiptSubscriptionReq(typing_extensions.TypedDict):
    """
    No description specified
    """

    callback_reference: typing_extensions.NotRequired[CallbackReference]
    filter_criteria: typing_extensions.NotRequired[str]


class _SerializerDeliveryReceiptSubscriptionReq(pydantic.BaseModel):
    """
    Serializer for DeliveryReceiptSubscriptionReq handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    callback_reference: typing.Optional[_SerializerCallbackReference] = pydantic.Field(
        alias="callbackReference", default=None
    )
    filter_criteria: typing.Optional[str] = pydantic.Field(
        alias="filterCriteria", default=None
    )


class DeliverySubscriptionReqCall(typing_extensions.TypedDict):
    """
    No description specified
    """

    delivery_receipt_subscription: typing_extensions.NotRequired[
        DeliveryReceiptSubscriptionReq
    ]


class _SerializerDeliverySubscriptionReqCall(pydantic.BaseModel):
    """
    Serializer for DeliverySubscriptionReqCall handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    delivery_receipt_subscription: typing.Optional[
        _SerializerDeliveryReceiptSubscriptionReq
    ] = pydantic.Field(alias="deliveryReceiptSubscription", default=None)
