"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class OutboundSmsTextMessage(typing_extensions.TypedDict):
    """
    No description specified
    """

    message: typing_extensions.NotRequired[str]


class _SerializerOutboundSmsTextMessage(pydantic.BaseModel):
    """
    Serializer for OutboundSmsTextMessage handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    message: typing.Optional[str] = pydantic.Field(alias="message", default=None)


class CallbackReference(typing_extensions.TypedDict):
    """
    No description specified
    """

    callback_data: typing_extensions.NotRequired[str]
    notify_url: typing_extensions.NotRequired[str]


class _SerializerCallbackReference(pydantic.BaseModel):
    """
    Serializer for CallbackReference handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    callback_data: typing.Optional[str] = pydantic.Field(
        alias="callbackData", default=None
    )
    notify_url: typing.Optional[str] = pydantic.Field(alias="notifyURL", default=None)


class OutboundSmsMessageReq(typing_extensions.TypedDict):
    """
    No description specified
    """

    address: typing_extensions.NotRequired[typing.List[str]]
    client_correlator: typing_extensions.NotRequired[str]
    outbound_sms_text_message: typing_extensions.NotRequired[OutboundSmsTextMessage]
    receipt_request: typing_extensions.NotRequired[CallbackReference]
    sender_address: typing_extensions.NotRequired[str]
    sender_name: typing_extensions.NotRequired[str]


class _SerializerOutboundSmsMessageReq(pydantic.BaseModel):
    """
    Serializer for OutboundSmsMessageReq handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    address: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="address", default=None
    )
    client_correlator: typing.Optional[str] = pydantic.Field(
        alias="clientCorrelator", default=None
    )
    outbound_sms_text_message: typing.Optional[_SerializerOutboundSmsTextMessage] = (
        pydantic.Field(alias="outboundSMSTextMessage", default=None)
    )
    receipt_request: typing.Optional[_SerializerCallbackReference] = pydantic.Field(
        alias="receiptRequest", default=None
    )
    sender_address: typing.Optional[str] = pydantic.Field(
        alias="senderAddress", default=None
    )
    sender_name: typing.Optional[str] = pydantic.Field(alias="senderName", default=None)


class OutboundSmsMessageReqCall(typing_extensions.TypedDict):
    """
    No description specified
    """

    outbound_sms_message_request: typing_extensions.NotRequired[OutboundSmsMessageReq]


class _SerializerOutboundSmsMessageReqCall(pydantic.BaseModel):
    """
    Serializer for OutboundSmsMessageReqCall handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    outbound_sms_message_request: typing.Optional[_SerializerOutboundSmsMessageReq] = (
        pydantic.Field(alias="outboundSMSMessageRequest", default=None)
    )
