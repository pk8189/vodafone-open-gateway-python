"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class CallbackReference(typing_extensions.TypedDict):
    """
    No description specified
    """

    callback_data: typing_extensions.NotRequired[str]
    notify_url: typing_extensions.NotRequired[str]


class _SerializerCallbackReference(pydantic.BaseModel):
    """
    Serializer for CallbackReference handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    callback_data: typing.Optional[str] = pydantic.Field(
        alias="callbackData", default=None
    )
    notify_url: typing.Optional[str] = pydantic.Field(alias="notifyURL", default=None)


class SubscriptionReq(typing_extensions.TypedDict):
    """
    No description specified
    """

    callback_reference: typing_extensions.NotRequired[CallbackReference]
    client_correlator: typing_extensions.NotRequired[str]
    criteria: typing_extensions.NotRequired[str]
    destination_address: typing_extensions.NotRequired[str]
    notification_format: typing_extensions.NotRequired[str]


class _SerializerSubscriptionReq(pydantic.BaseModel):
    """
    Serializer for SubscriptionReq handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    callback_reference: typing.Optional[_SerializerCallbackReference] = pydantic.Field(
        alias="callbackReference", default=None
    )
    client_correlator: typing.Optional[str] = pydantic.Field(
        alias="clientCorrelator", default=None
    )
    criteria: typing.Optional[str] = pydantic.Field(alias="criteria", default=None)
    destination_address: typing.Optional[str] = pydantic.Field(
        alias="destinationAddress", default=None
    )
    notification_format: typing.Optional[str] = pydantic.Field(
        alias="notificationFormat", default=None
    )


class SubscriptionReqCall(typing_extensions.TypedDict):
    """
    No description specified
    """

    subscription: typing_extensions.NotRequired[SubscriptionReq]


class _SerializerSubscriptionReqCall(pydantic.BaseModel):
    """
    Serializer for SubscriptionReqCall handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    subscription: typing.Optional[_SerializerSubscriptionReq] = pydantic.Field(
        alias="subscription", default=None
    )
