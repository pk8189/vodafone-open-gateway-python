"""File Generated by Sideko (sideko.dev)"""

from sms_messaging_interface.core import (
    RequestOptions,
    SyncBaseClient,
    to_encodable,
    AsyncBaseClient,
    default_request_options,
)
import typing
from sms_messaging_interface.types.smsmessaging.v1.outbound.subscriptions import (
    models,
    params,
)


class SubscriptionsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.DeliverySubscriptionReqCall,
        sender_address: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.DeliverySubscriptionRspCall:
        """
        Subscribe to receive delivery status notifications for all previously
        submitted SMS messages.

        The sending web application is identified by their provider assigned
        senderAddress (short code).

        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerDeliverySubscriptionReqCall
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path=f"/smsmessaging/v1/outbound/{sender_address}/subscriptions",
            json=_json,
            cast_to=models.DeliverySubscriptionRspCall,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self,
        *,
        sender_address: str,
        subscription_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Unsubscribe from receiving delivery status notifications for all
        previously submitted SMS messages.

        The sending web application is identified by their provider assigned
        senderAddress (short code).

        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="DELETE",
            path=f"/smsmessaging/v1/outbound/{sender_address}/subscriptions/{subscription_id}",
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncSubscriptionsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.DeliverySubscriptionReqCall,
        sender_address: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.DeliverySubscriptionRspCall:
        """
        Subscribe to receive delivery status notifications for all previously
        submitted SMS messages.

        The sending web application is identified by their provider assigned
        senderAddress (short code).

        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerDeliverySubscriptionReqCall
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path=f"/smsmessaging/v1/outbound/{sender_address}/subscriptions",
            json=_json,
            cast_to=models.DeliverySubscriptionRspCall,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self,
        *,
        sender_address: str,
        subscription_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Unsubscribe from receiving delivery status notifications for all
        previously submitted SMS messages.

        The sending web application is identified by their provider assigned
        senderAddress (short code).

        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="DELETE",
            path=f"/smsmessaging/v1/outbound/{sender_address}/subscriptions/{subscription_id}",
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
