"""File Generated by Sideko (sideko.dev)"""

from sms_messaging_interface.core import (
    SyncBaseClient,
    RequestOptions,
    default_request_options,
    AsyncBaseClient,
    to_encodable,
)
import typing
from sms_messaging_interface.types.smsmessaging.v1.inbound.subscriptions import (
    models,
    params,
)


class SubscriptionsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.SubscriptionReqCall,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionRspCall:
        """
        Subscribe to receive SMS messages addressed to your web application.

        Once subscribed, your web application will receive SMS messages when
        processed by your provider messaging platform.

        The sending web application is identified by their provider assigned
        senderAddress (short code).

        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerSubscriptionReqCall)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/smsmessaging/v1/inbound/subscriptions",
            json=_json,
            cast_to=models.SubscriptionRspCall,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self,
        *,
        subscription_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Unsubscribe from receiving SMS messages addressed to your web
        application.

        Once unsubscribed, your web application will no longer receive SMS
        messages when processed by your provider messaging platform.

        SMS messages that have not been retrieved will expire once their
        validity period has been reached.

        The sending web application is identified by their provider assigned
        senderAddress (short code).

        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="DELETE",
            path=f"/smsmessaging/v1/inbound/subscriptions/{subscription_id}",
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncSubscriptionsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.SubscriptionReqCall,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionRspCall:
        """
        Subscribe to receive SMS messages addressed to your web application.

        Once subscribed, your web application will receive SMS messages when
        processed by your provider messaging platform.

        The sending web application is identified by their provider assigned
        senderAddress (short code).

        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerSubscriptionReqCall)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/smsmessaging/v1/inbound/subscriptions",
            json=_json,
            cast_to=models.SubscriptionRspCall,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self,
        *,
        subscription_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Unsubscribe from receiving SMS messages addressed to your web
        application.

        Once unsubscribed, your web application will no longer receive SMS
        messages when processed by your provider messaging platform.

        SMS messages that have not been retrieved will expire once their
        validity period has been reached.

        The sending web application is identified by their provider assigned
        senderAddress (short code).

        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="DELETE",
            path=f"/smsmessaging/v1/inbound/subscriptions/{subscription_id}",
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
