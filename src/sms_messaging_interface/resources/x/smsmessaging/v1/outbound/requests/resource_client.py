"""File Generated by Sideko (sideko.dev)"""

from sms_messaging_interface.core import (
    RequestOptions,
    to_encodable,
    default_request_options,
    AsyncBaseClient,
    SyncBaseClient,
)
from sms_messaging_interface.resources.x.smsmessaging.v1.outbound.requests.delivery_infos import (
    DeliveryInfosClient,
    AsyncDeliveryInfosClient,
)
from sms_messaging_interface.types.x.smsmessaging.v1.outbound.requests import (
    params,
    models,
)
import typing


class RequestsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.delivery_infos = DeliveryInfosClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.OutboundSmsMessageReqCall,
        customer_id: str,
        sender_address: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.OutboundSmsMessageRspCall:
        """
        Send an SMS message to one or more recipients.

        A recipient is addressed by their unique MSISDN.

        The sending web application is identified by their assigned customerID.

        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerOutboundSmsMessageReqCall
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path=f"/{customer_id}/smsmessaging/v1/outbound/{sender_address}/requests",
            json=_json,
            cast_to=models.OutboundSmsMessageRspCall,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncRequestsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.delivery_infos = AsyncDeliveryInfosClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.OutboundSmsMessageReqCall,
        customer_id: str,
        sender_address: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.OutboundSmsMessageRspCall:
        """
        Send an SMS message to one or more recipients.

        A recipient is addressed by their unique MSISDN.

        The sending web application is identified by their assigned customerID.

        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerOutboundSmsMessageReqCall
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path=f"/{customer_id}/smsmessaging/v1/outbound/{sender_address}/requests",
            json=_json,
            cast_to=models.OutboundSmsMessageRspCall,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
